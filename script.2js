console.log("assignment 3");

//Set up drawing environment with margin conventions
var margin = {t:20,r:20,b:50,l:50};
var width = document.getElementById('plot').clientWidth - margin.l - margin.r,
    height = document.getElementById('plot').clientHeight - margin.t - margin.b;

var plot = d3.select('#plot')
    .append('svg')
    .attr('width',width + margin.l + margin.r)
    .attr('height',height + margin.t + margin.b)
    .append('g')
    .attr('class','plot-area')
    .attr('transform','translate('+margin.l+','+margin.t+')');

//Initialize axes
//Consult documentation here https://github.com/mbostock/d3/wiki/SVG-Axes

var scaleX,scaleY;

var axisX = d3.svg.axis()
    .orient('bottom')
    .tickSize(-height)
    .tickValues([0,25,50,75,100]);
var axisY = d3.svg.axis()
    .orient('left')
    .tickSize(-width)
    .tickValues([0,25,50,75,100]);

//Start importing data
d3.csv('/data/world_bank_2012.csv', parse, dataLoaded);

function parse(d){

    //Eliminate records for which gdp per capita isn't available

    //Check "primary completion" and "urban population" columns
    //if figure is unavailable and denoted as "..", replace it with undefined
    if(d['GDP per capita, PPP (constant 2011 international $)']=='..'){
        return;
    }

    return {
        cName: d['Country Name'],
        cCode: d['Country Code'],
        gdpPerCap: +d['GDP per capita, PPP (constant 2011 international $)'],
        primaryCompletion: d['Primary completion rate, total (% of relevant age group)']!='..'?+d['Primary completion rate, total (% of relevant age group)']:undefined,
        urbanPop: d['Urban population (% of total)']!='..'?+d['Urban population (% of total)']:undefined
    }
}

function dataLoaded(error, rows){
    //with data loaded, we can now mine the data
    var gdpPerCapMin = d3.min(rows, function(d){return d.gdpPerCap}),
        gdpPerCapMax = d3.max(rows, function(d){return d.gdpPerCap});
    var primaryCompletionMin = d3.min(rows, function(d){return d.primaryCompletion}),
        primaryCompletionMax = d3.max(rows, function(d){return d.primaryCompletion});
    var urbanPopMin = d3.min(rows, function (d){return d.urbanPop}),
        urbanPopMax = d3.max(rows,function (d){return d.urbanPop});


    //with mined information, we can now set up the scales
    scaleX = d3.scale.log().domain([gdpPerCapMin,gdpPerCapMax]).range([0,width]),
        scaleY = d3.scale.linear().domain([0,100]).range([height,0]);

    //Once we know the scales, we can represent the scales with axes
    axisX.scale(scaleX);
    axisY.scale(scaleY);

    plot.append('g')
        .attr('class','axis axis-x')
        .attr('transform','translate(0,'+height+')')
        .call(axisX);

    plot.append('g')
        .attr('class','axis axis-y')
        .call(axisY);







    var countries = plot.selectAll('g')
        .data(rows)
        .enter()
        .append('g')
        .attr('class','countries')

        countries.append('line')
            .attr('class','primaryCompletion')
        .attr('x1',function(d){
            return scaleX(d.gdpPerCap)
        })
        .attr('x2',function(d){
            return scaleY(d.gdpPerCap)
        })
            .attr('y1','height')
            .attr('y1',function(d){
            return scaleY(d.primaryCompletion)
        })
        .attr('y2',function(d){
            return 0
        })
        .attr('stroke-width',1)
        .style('fill','red');

    countries.append('line')
        .attr('class','urbanPop')
        .attr('x1',function(d){
            return scaleX(d.gdpPerCap)
        })
        .attr('x2',function(d){
            return scaleY(d.gdpPerCap)
        })
        .attr('y1',height)

        .attr('y2',function(d){
            return scaleY(urbanPop)
        })
        .attr('stroke-width',1)
        .style('fill','blue');
}


